변수
변수란 프로그램을 실행하는 과정에서 변경될 수 있는 값을 저장하는 저장소입니다. 또한 변수는 어떤 값을 이름으로 가리킬 때 사용하는 기능이기도 합니다.
자바스크립트에서 변수는 다음과 같이 만듭니다.
대소 문자 구별
위에서 소개한 3가지 규칙은 지키지 않으면 오류가 발생합니다. 하지만 대소 문자를 구별하는 명명 규칙은 직접적인 오류가 발생하지 않습니다. 그러나 이 규칙을 인지하지 못한 상태에서 변수의 이름을 짓게 되면, 의도치 않은 오류가 발생할 수 있습니다.
자바스크립트는 변수 이름에서 대소 문자를 구별(Case-Sensitive)합니다. 다음 예제 코드에서 선언한 두 변수는 다른 변수입니다.
-----------------------------------------------------------------------------------
자바스크립트에서 

숫자형(Number Type)형
수의 종류를 구분하지 않습니다. 따라서 소수, 음수, 실수와 같은 수를 모두 포함하는 자료형입니다.

console.log(1 + 2); // 3
console.log(1 * 2); // 2
console.log(1 - 2); // -1
console.log(1 / 2); // 0.5

문자형
문자형(String Type)형
사람의 이름과 같은 문자열을 포함하는 자료형입니다. 다음은 자바스크립트의 문자형을 이용해 저자의 이름을 변수에 저장한 예입니다.

let name = "이정환";
let welcomeText = "님 반가워요!";
let resultWelcomeText = name + welcomeText;

console.log(resultWelcomeText); // 


불리언 형(Boolean type)형
참(true) 또는 거짓(false)만을 저장하는 자료형입니다. 우리 일상에서 이런 예를 찾자면 불을 껐다 켰다 하는 스위치에 비유할 수 있습니다.

let emptyVar = null;

console.log(emptyVar); // null;


---------------------------------------------------------------------------------

명시적 형 변환
명시적 형 변환은 묵시적 형 변환과 반대로 내장 함수 등을 이용해 프로그래머가 의도적으로 어떤 자료형을 다른 자료형으로 변경하는 작업입니다.

숫자형으로 변환
다음은 문자열을 숫자로 명시적으로 형 변환하는 예
let strA = "10";
let strB = "10개";

let numA = Number(strA);
let numB = Number(strB);

console.log(numA); // 10
console.log(numB); // NaN

문자열로 변환
다음은 숫자형을 문자열로 명시적으로 형 변환하는 예입니다.
let num = 2022;
let str = String(num);

console.log(str); // 2022

불리언으로 변환
불리언 값으로 변환하는 내장 함수로는 Boolean이 있습니다.
let varA = "하이";
let varB = 0;
let varC = "";

let boolA = Boolean(varA);
let boolB = Boolean(varB);
let boolC = Boolean(varC);

console.log(boolA); // true
console.log(boolB); // false
console.log(boolC); // false
-------------------------------------------------------------------------------------------

대입 연산자
대입 연산자(=)는 가장 기본이 되는 연산자로서 변수에 값을 할당하는 역할을 합니다.
let numA = 1;
let numB;
let numC;

numB = numC = numA; ①

console.log(numA, numB, numC); // 1 1 1

산술 연산자
산술 연산자는 덧셈(+), 뺄셈(-), 곱셈(*), 나눗셈(/), 나머지 연산(%)처럼 프로그래밍에 필요한 가장 기본적인 계산 기능을 수행하는 연산자입니다.
let numberA = 1;
let numberB = 2;

console.log(numberA + numberB); // 3
console.log(numberA - numberB); // -1
console.log(numberA * numberB); // 2
console.log(numberA / numberB); // 0.5
console.log(numberA % numberB); // 1

복합 대입 연산자
복합 대입 연산자는 대입 연산자와 산술 연산자의 기능을 함께 이용할 때 사용합니다.
let number = 10;
number += 10; ①

console.log(number); // 20

증감 연산자
증감 연산자는 값을 1씩 늘리거나 줄일 때 사용하는 연산자입니다. 
let a = 1;
a++; ①
console.log(a); // 2

let b = 1;
b--; ②
console.log(b); // 0

논리 연산자
논리 연산자는 참(true)과 거짓(false)을 포함하는 불리언 값을 다룰 때 사용하는 연산자입니다.
OR(||) : 둘 중 하나라도 참이면 참
AND(&&) : 둘 중 하나라도거짓이면 거짓
NOT(!) : 참이면 거짓, 거짓이면 참


------------------------------------------------------------------------------------------
switch 문
switch 문은 중첩 if 문처럼 비교할 조건이 많을 때 사용하는 조건문입니다. switch 문은 식이나 값을 case 문과 비교해 정확히 일치할 때만 수행합니다.

if 문
if는 영어로 ‘만약’이라는 뜻입니다. 따라서 if 문은 “만약 A라면 B를 하고, 그렇지 않으면 C를 하라”와 같이 조건에 따라 각기 다른 명령을 수행하도록 만들 때 사용합니다.

반복문의 유용성과 for문
예를 들어 1부터 100까지 콘솔에 출력한다고 가정해 봅시다. 반복문을 쓰지 않는다면 어떻게 프로그래밍해야 할까요? 1부터 100까지 콘솔에 출력하기 위해서는 console.log를 100번 작성해야 할 겁니다.

반복문 강제 종료하기, 건너뛰기
break 문을 사용하면 조건식에서 정의한 반복문의 종료 조건과 상관없이 반복을 강제로 종료할 수 있습니다.

중첩 함수
자바스크립트는 함수 내에 또 다른 함수를 선언할 수 있습니다. 특정 함수 내부에서 선언된 함수를 ‘중첩 함수(Nested Function)’라고 합니다.

함수와 호이스팅
호이스팅(hoisting)이란 프로그램에서 변수나 함수를 호출하거나 접근하는 코드가 함수 선언 코드보다 위에 있음에도 불구하고, 마치 선언 코드가 위에 있는 것처럼 동작하는 자바스크립트만의 독특한 기능입니다. 다음 예제를 보면 쉽게 이해할 수 있습니다.

콜백 함수
앞서 함수 표현식에서 자바스크립트는 함수를 값으로 취급해 변수에 저장할 수 있음을 알았습니다. 따라서 함수는 다른 함수의 인수(인수=값)로도 전달할 수 있는데, 이를 ‘콜백 함수(Callback Function)’라고 합니다.

함수 표현식을 이용한 콜백 함수
콜백 함수는 함수 표현식으로도 만들 수 있습니다. 다음은 함수 표현식을 이용한 콜백 함수의 예입니다.

화살표 함수
화살표 함수는 익명 함수를 매우 간결하게 작성할 때 사용하는 함수 표현식의 단축 문법입니다. 화살표 함수는 다음과 같은 형식으로 사용합니다.

블록 스코프
(Block Scope)
함수 스코프
(Function Scope)
블록 내부에서 선언한 변수가 갖는 스코프
함수 내부에서 선언한 변수가 갖는 스코프
